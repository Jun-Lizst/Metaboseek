% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Module_FilterModule.R
\name{FilterModule}
\alias{FilterModule}
\alias{FilterModuleUI}
\title{FilterModule}
\usage{
FilterModule(
  input,
  output,
  session,
  values = reactiveValues(featureTables = NULL, MultiFilter = NULL),
  static = list(lab = "Filter"),
  initValues = list(active = F, filter = TRUE, colSelected = NULL, summary = NULL,
    numeric = T, minSel = NULL, maxSel = NULL, modeSel = NULL, txtSel = NULL, minSelInit =
    NULL, maxSelInit = NULL, modeSelInit = NULL, txtSelInit = NULL, loadingFilters = F)
)

FilterModuleUI(id)
}
\arguments{
\item{input}{arguments necessary for use with 
\code{\link[shiny]{callModule}()}}

\item{output}{arguments necessary for use with 
\code{\link[shiny]{callModule}()}}

\item{session}{arguments necessary for use with 
\code{\link[shiny]{callModule}()}}

\item{values}{a \code{\link[shiny]{reactiveValues}} object that in effect 
gives read and write access to external objects}

\item{static}{a list of arguments that are not in a reactive context 
and hence do not change while the app is running.}

\item{initValues}{set initial values for input fields}

\item{id}{id to be used to define a namespace via  \code{\link[shiny]{NS}()} 
(must match \code{id} in \code{\link[shiny]{callModule}} 
for the server Module)}
}
\value{
a reactivevalues object with its internalValues
}
\description{
Module to apply filters to a featureTable (UI). Has to be inside a 
MultiFilterModule, and will modify the parent modules internalValues, accessed as values$MultiFilter!
}
\section{Functions}{
\itemize{
\item \code{FilterModule}: server logic

\item \code{FilterModuleUI}: UI elements
}}

\seealso{
\code{\link{values}} for a description of the \code{values} object
}
